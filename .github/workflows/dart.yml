# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Closers Flutter

on:
  push:
    branches: [ "main" ]
    paths: [ "domains/client/**" ]
  pull_request:
    branches: [ "main" ]
    paths: [ "domains/client/**" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2

      - name: Install dependencies
        working-directory: ./domains/client
        run: flutter pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        working-directory: ./domains/client
        run: flutter analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      # - name: Run tests
      #   working-directory: ./domains/client
      #   run: flutter test

      - name: 'Build APK'
        working-directory: ./domains/client
        id: 'build'
        run: 'flutter build apk --split-per-abi && echo "::set-output name=built-apk::build/app/outputs/flutter-apk/"'
        # Build the APK using the value of the "matrix-target" input.
        # Use the "id" property to give the step a unique identifier.
        # Use the "::set-output" command to set the value of the "built-apk" output variable.

      - name: 'Upload APK'
        uses: 'actions/upload-artifact@v2'
        with:
          name: 'Closers'
          path: '${{ steps.build.outputs.built-apk }}'
        # Upload the built APK
